{"ast":null,"code":"import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport useInput from '../hooks/useInput';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction CommentForm({\n  post\n}) {\n  const dispatch = useDispatch();\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\n  const id = useSelector(state => {\n    var _state$user$user;\n\n    return (_state$user$user = state.user.user) === null || _state$user$user === void 0 ? void 0 : _state$user$user.id;\n  });\n  const {\n    addCommentDone,\n    addCommentLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n  const onSubmitComment = useCallback(() => {\n    console.log(post.id, commentText);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText, id]);\n  return /*#__PURE__*/_jsx(Form, {\n    onFinish: onSubmitComment,\n    children: /*#__PURE__*/_jsxs(Form.Item, {\n      style: {\n        position: 'relative',\n        margin: 0\n      },\n      children: [/*#__PURE__*/_jsx(Input.TextArea, {\n        value: commentText,\n        onChange: onChangeCommentText,\n        rows: 4\n      }), /*#__PURE__*/_jsx(Button, {\n        style: {\n          position: 'absolute',\n          right: 0,\n          bottom: -40,\n          zIndex: 1\n        },\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: addCommentLoading,\n        children: \"Twit\"\n      })]\n    })\n  });\n}\n\nexport default CommentForm;","map":{"version":3,"sources":["C:/Users/irald/Documents/reactSns/front/component/CommentForm.js"],"names":["React","useCallback","useEffect","useDispatch","useSelector","Form","Input","Button","useInput","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","commentText","onChangeCommentText","setCommentText","id","state","user","addCommentDone","addCommentLoading","onSubmitComment","console","log","type","data","content","postId","userId","position","margin","right","bottom","zIndex"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,SAA5B,QAA4C,OAA5C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAAQC,IAAR,EAAcC,KAAd,EAAqBC,MAArB,QAAkC,MAAlC;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAAQC,mBAAR,QAAkC,kBAAlC;;;;AAEA,SAASC,WAAT,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAA6B;AAC3B,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM,CAACU,WAAD,EAAcC,mBAAd,EAAmCC,cAAnC,IAAqDP,QAAQ,CAAC,EAAD,CAAnE;AACA,QAAMQ,EAAE,GAAGZ,WAAW,CAAEa,KAAD;AAAA;;AAAA,+BAAWA,KAAK,CAACC,IAAN,CAAWA,IAAtB,qDAAW,iBAAiBF,EAA5B;AAAA,GAAD,CAAtB;AACA,QAAM;AAACG,IAAAA,cAAD;AAAiBC,IAAAA;AAAjB,MAAsChB,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACN,IAAlB,CAAvD;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,cAAJ,EAAoB;AAClBJ,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACI,cAAD,CAJM,CAAT;AAMA,QAAME,eAAe,GAAGpB,WAAW,CAAC,MAAM;AACxCqB,IAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAI,CAACK,EAAjB,EAAqBH,WAArB;AACAD,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEf,mBADC;AAEPgB,MAAAA,IAAI,EAAE;AAACC,QAAAA,OAAO,EAAEb,WAAV;AAAuBc,QAAAA,MAAM,EAAEhB,IAAI,CAACK,EAApC;AAAwCY,QAAAA,MAAM,EAAEZ;AAAhD;AAFC,KAAD,CAAR;AAID,GANkC,EAOnC,CAACH,WAAD,EAAcG,EAAd,CAPmC,CAAnC;AASA,sBACE,KAAC,IAAD;AAAM,IAAA,QAAQ,EAAEK,eAAhB;AAAA,2BACE,MAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAACQ,QAAAA,QAAQ,EAAE,UAAX;AAAuBC,QAAAA,MAAM,EAAE;AAA/B,OAAlB;AAAA,8BACE,KAAC,KAAD,CAAO,QAAP;AACE,QAAA,KAAK,EAAEjB,WADT;AAEE,QAAA,QAAQ,EAAEC,mBAFZ;AAGE,QAAA,IAAI,EAAE;AAHR,QADF,eAME,KAAC,MAAD;AACE,QAAA,KAAK,EAAE;AAACe,UAAAA,QAAQ,EAAE,UAAX;AAAuBE,UAAAA,KAAK,EAAE,CAA9B;AAAiCC,UAAAA,MAAM,EAAE,CAAC,EAA1C;AAA8CC,UAAAA,MAAM,EAAE;AAAtD,SADT;AAEE,QAAA,IAAI,EAAC,SAFP;AAGE,QAAA,QAAQ,EAAC,QAHX;AAIE,QAAA,OAAO,EAAEb,iBAJX;AAAA;AAAA,QANF;AAAA;AADF,IADF;AAmBD;;AAMD,eAAeV,WAAf","sourcesContent":["import React, {useCallback, useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {Form, Input, Button} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport useInput from '../hooks/useInput';\r\nimport {ADD_COMMENT_REQUEST} from '../reducers/post';\r\n\r\nfunction CommentForm({post}) {\r\n  const dispatch = useDispatch();\r\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\r\n  const id = useSelector((state) => state.user.user?.id);\r\n  const {addCommentDone, addCommentLoading} = useSelector((state) => state.post);\r\n\r\n  useEffect(() => {\r\n    if (addCommentDone) {\r\n      setCommentText('');\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    console.log(post.id, commentText);\r\n    dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {content: commentText, postId: post.id, userId: id},\r\n    });\r\n  },\r\n  [commentText, id]);\r\n\r\n  return (\r\n    <Form onFinish={onSubmitComment}>\r\n      <Form.Item style={{position: 'relative', margin: 0}}>\r\n        <Input.TextArea\r\n          value={commentText}\r\n          onChange={onChangeCommentText}\r\n          rows={4}\r\n        />\r\n        <Button\r\n          style={{position: 'absolute', right: 0, bottom: -40, zIndex: 1}}\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          loading={addCommentLoading}\r\n        >\r\n          Twit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}