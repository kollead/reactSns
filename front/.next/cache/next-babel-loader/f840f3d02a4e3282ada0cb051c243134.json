{"ast":null,"code":"import { all, fork, takeLatest, put, call, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}}/comment`, data);\n}\n\nfunction removeCommentAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["C:/Users/irald/Documents/reactSns/front/sagas/post.js"],"names":["all","fork","takeLatest","put","call","delay","axios","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addCommentAPI","postId","removeCommentAPI","addPost","action","id","generate","type","content","error","response","addComment","removePost","watchAddPost","watchAddComment","watchRemovePost","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, takeLatest, put, call, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport shortid from 'shortid';\r\nimport {ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE, ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}}/comment`, data);\r\n}\r\nfunction removeCommentAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}