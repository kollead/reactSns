{"ast":null,"code":"// user/[id].js\nimport React, { useEffect } from 'react';\nimport { END } from 'redux-saga';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport axios from 'axios';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport { Card, Avatar } from 'antd';\nimport wrapper from '../../store/configureStore';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_INFO_REQUEST } from '../../reducers/user';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport AppLayout from '../../component/AppLayout';\nimport PostCard from '../../component/PostCard';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst User = () => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const {\n    id\n  } = router.query;\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  const {\n    userInfo\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    function onScroll() {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePost && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          console.log('lastId: ', lastId);\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId,\n            data: id\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePost, id, mainPosts.length]);\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [userInfo && /*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsxs(\"title\", {\n        children: [userInfo.nickname, \"\\uB2D8\\uC758 \\uAE00\"]\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: `${userInfo.nickname}님의 게시글`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"og:title\",\n        content: `${userInfo.nickname}님의 게시글`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"og:description\",\n        content: `${userInfo.nickname}님의 게시글`\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"og:image\",\n        content: \"http://nodebird.com/favicon.ico\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"og:url\",\n        content: `https://nodebird.com/pot.${id}`\n      })]\n    }), userInfo ? /*#__PURE__*/_jsx(Card, {\n      actions: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [\"Twit\", /*#__PURE__*/_jsx(\"br\", {}), userInfo.Posts]\n      }, \"twit\"), /*#__PURE__*/_jsxs(\"div\", {\n        children: [\"Following\", /*#__PURE__*/_jsx(\"br\", {}), userInfo.Following]\n      }, \"followings\"), /*#__PURE__*/_jsxs(\"div\", {\n        children: [\"Follower\", /*#__PURE__*/_jsx(\"br\", {}), userInfo.Follower]\n      }, \"followers\")],\n      children: /*#__PURE__*/_jsx(Card.Meta, {\n        title: userInfo.nickname,\n        avatar: /*#__PURE__*/_jsx(Link, {\n          href: `/user/${userInfo.id}`,\n          children: /*#__PURE__*/_jsx(\"a\", {\n            children: /*#__PURE__*/_jsx(Avatar, {\n              children: userInfo.nickname[0]\n            })\n          })\n        })\n      })\n    }) : null, \";\", mainPosts.map(p => /*#__PURE__*/_jsx(PostCard, {\n      post: p\n    }, p.id))]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch({\n    type: LOAD_USER_INFO_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n  console.log('getState', context.store.getState().post.mainPosts);\n  return {\n    props: {}\n  };\n});\nexport default User;","map":null,"metadata":{},"sourceType":"module"}