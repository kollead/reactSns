{"ast":null,"code":"import React, { useState, useCallback } from 'react';\nimport { Card, Popover, Button, Avatar, List, Comment } from 'antd';\nimport { EllipsisOutlined, HeartOutlined, MessageOutlined, HeartTwoTone, RetweetOutlined } from '@ant-design/icons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Link from 'next/link';\nimport dayjs from 'dayjs';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport FollowButton from './FollowButton';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar relativeTime = require('dayjs/plugin/relativeTime');\n\ndayjs.extend(relativeTime);\ndayjs.locale('ko');\n\nfunction PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var id = useSelector(function (state) {\n    var _state$user$user;\n\n    return (_state$user$user = state.user.user) === null || _state$user$user === void 0 ? void 0 : _state$user$user.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      removePostLoading = _useSelector.removePostLoading;\n\n  var dispatch = useDispatch();\n  var onLike = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onUnLike = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onRetweet = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onRemovePost = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var liked = post.Likers.find(function (v) {\n    return v.id === id;\n  });\n  var now = dayjs();\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: {\n      marginBottom: 10\n    },\n    children: [/*#__PURE__*/_jsx(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n        images: post.Images\n      }),\n      actions: [/*#__PURE__*/_jsx(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\"), liked ? /*#__PURE__*/_jsx(HeartTwoTone, {\n        twoToneColor: \"eb2f96\",\n        onClick: onUnLike\n      }, \"heart\") : /*#__PURE__*/_jsx(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\"), /*#__PURE__*/_jsx(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\"), /*#__PURE__*/_jsx(Popover, {\n        content: /*#__PURE__*/_jsx(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Button, {\n              children: \"Modify\"\n            }), /*#__PURE__*/_jsx(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"Remove\"\n            })]\n          }) : /*#__PURE__*/_jsx(Button, {\n            children: \"Report\"\n          })\n        }),\n        children: /*#__PURE__*/_jsx(EllipsisOutlined, {})\n      }, \"more\")],\n      title: post.RetweetId ? \"\".concat(post.User.nickname, \" \\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717 \\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n      extra: id && /*#__PURE__*/_jsx(FollowButton, {\n        post: post\n      }),\n      children: post.RetweetId && post.Retweet ? /*#__PURE__*/_jsxs(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n          images: post.Retweet.Images\n        }),\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            \"float\": 'right'\n          },\n          children: dayjs(post.createdAt).diff(now, 'day') >= 2 ? dayjs(post.createdAt).format('YYYY.MM.DD') : dayjs(post.createdAt).fromNow()\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: \"/user/\".concat(post.Retweet.User.id),\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.Retweet.User.nickname[0]\n              })\n            })\n          }),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.Retweet.content\n          })\n        })]\n      }) : /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            \"float\": 'right'\n          },\n          children: dayjs(post.createdAt).diff(now, 'day') >= 2 ? dayjs(post.createdAt).format('YYYY.MM.DD') : dayjs(post.createdAt).fromNow()\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: \"/user/\".concat(post.User.id),\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.User.nickname[0]\n              })\n            })\n          }),\n          title: post.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.content\n          })\n        })]\n      })\n    }), commentFormOpened && /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(CommentForm, {\n        post: post\n      }), /*#__PURE__*/_jsx(List, {\n        header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: function renderItem(item) {\n          return /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              style: {\n                \"float\": 'right'\n              },\n              children: dayjs(post.createdAt).diff(now, 'day') >= 2 ? dayjs(post.createdAt).format('YYYY.MM.DD') : dayjs(post.createdAt).fromNow()\n            }), /*#__PURE__*/_jsx(Comment, {\n              author: item.User.nickname,\n              avatar: /*#__PURE__*/_jsx(Link, {\n                href: \"/user/\".concat(item.User),\n                children: /*#__PURE__*/_jsx(\"a\", {\n                  children: /*#__PURE__*/_jsx(Avatar, {\n                    children: item.User.nickname[0]\n                  })\n                })\n              }),\n              content: item.content\n            })]\n          });\n        }\n      })]\n    })]\n  });\n}\n\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/irald/Documents/reactSns/front/component/PostCard.js"],"names":["React","useState","useCallback","Card","Popover","Button","Avatar","List","Comment","EllipsisOutlined","HeartOutlined","MessageOutlined","HeartTwoTone","RetweetOutlined","useSelector","useDispatch","Link","dayjs","PostImages","CommentForm","PostCardContent","FollowButton","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","relativeTime","require","extend","locale","PostCard","post","commentFormOpened","setCommentFormOpened","id","state","user","removePostLoading","dispatch","onLike","alert","type","data","onUnLike","onRetweet","onToggleComment","prev","onRemovePost","liked","Likers","find","v","now","marginBottom","Images","User","RetweetId","nickname","Retweet","createdAt","diff","format","fromNow","content","Comments","length","item"],"mappings":"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","sourcesContent":["import React, {useState, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Card, Popover, Button, Avatar, List, Comment} from 'antd';\r\nimport {EllipsisOutlined, HeartOutlined, MessageOutlined, HeartTwoTone, RetweetOutlined} from '@ant-design/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Link from 'next/link';\r\nimport dayjs from 'dayjs';\r\n\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport FollowButton from './FollowButton';\r\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\n\r\nconst relativeTime = require('dayjs/plugin/relativeTime');\r\n\r\ndayjs.extend(relativeTime);\r\ndayjs.locale('ko');\r\n\r\nfunction PostCard({post}) {\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const id = useSelector((state) => state.user.user?.id);\r\n  const {removePostLoading} = useSelector((state) => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  const onLike = useCallback(\r\n    () => {\r\n      if (!id) {\r\n        return alert('로그인이 필요합니다.');\r\n      }\r\n      return dispatch({\r\n        type: LIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }, [id],\r\n  );\r\n\r\n  const onUnLike = useCallback(\r\n    () => {\r\n      if (!id) {\r\n        return alert('로그인이 필요합니다.');\r\n      }\r\n      return dispatch({\r\n        type: UNLIKE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }, [id],\r\n  );\r\n\r\n  const onRetweet = useCallback(\r\n    () => {\r\n      if (!id) {\r\n        return alert('로그인이 필요합니다.');\r\n      }\r\n      return dispatch({\r\n        type: RETWEET_REQUEST,\r\n        data: post.id,\r\n      });\r\n    },\r\n    [id],\r\n  );\r\n\r\n  const onToggleComment = useCallback(\r\n    () => {\r\n      setCommentFormOpened((prev) => !prev);\r\n    }, [],\r\n  );\r\n\r\n  const onRemovePost = useCallback(\r\n    () => {\r\n      if (!id) {\r\n        return alert('로그인이 필요합니다.');\r\n      }\r\n      return dispatch({\r\n        type: REMOVE_POST_REQUEST,\r\n        data: post.id,\r\n      });\r\n    }, [id],\r\n  );\r\n  const liked = post.Likers.find((v) => v.id === id);\r\n  const now = dayjs();\r\n\r\n  return (\r\n    <div style={{marginBottom: 10}}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n          liked\r\n            ? <HeartTwoTone twoToneColor=\"eb2f96\" key=\"heart\" onClick={onUnLike} />\r\n            : <HeartOutlined key=\"heart\" onClick={onLike} />,\r\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"more\"\r\n            content={(\r\n              <Button.Group>\r\n                {id && post.User.id === id\r\n                  ? (\r\n                    <>\r\n                      <Button>Modify</Button>\r\n                      <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>Remove</Button>\r\n                    </>\r\n                  )\r\n                  : <Button>Report</Button>}\r\n              </Button.Group>\r\n            )}\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        title={post.RetweetId ? `${post.User.nickname} 님이 리트윗 하셨습니다.` : null}\r\n        extra={id && <FollowButton post={post} />}\r\n      >\r\n        {post.RetweetId && post.Retweet\r\n          ? (\r\n            <Card\r\n              cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n            >\r\n              <div style={{float: 'right'}}>\r\n                {dayjs(post.createdAt).diff(now, 'day') >= 2\r\n                  ? dayjs(post.createdAt).format('YYYY.MM.DD')\r\n                  : dayjs(post.createdAt).fromNow()}\r\n              </div>\r\n              <Card.Meta\r\n                avatar={(\r\n                  <Link href={`/user/${post.Retweet.User.id}`}>\r\n                    <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n                )}\r\n                title={post.Retweet.User.nickname}\r\n                description={<PostCardContent postData={post.Retweet.content} />}\r\n              />\r\n            </Card>\r\n          )\r\n          : (\r\n            <>\r\n              <div style={{float: 'right'}}>\r\n                {dayjs(post.createdAt).diff(now, 'day') >= 2\r\n                  ? dayjs(post.createdAt).format('YYYY.MM.DD')\r\n                  : dayjs(post.createdAt).fromNow()}\r\n              </div>\r\n              <Card.Meta\r\n                avatar={(\r\n                  <Link href={`/user/${post.User.id}`}>\r\n                    <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                  </Link>\r\n                  )}\r\n                title={post.User.nickname}\r\n                description={<PostCardContent postData={post.content} />}\r\n              />\r\n            </>\r\n          )}\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <div>\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments.length}개의 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments}\r\n            renderItem={(item) => (\r\n              <li>\r\n                <div style={{float: 'right'}}>\r\n                  {dayjs(post.createdAt).diff(now, 'day') >= 2\r\n                    ? dayjs(post.createdAt).format('YYYY.MM.DD')\r\n                    : dayjs(post.createdAt).fromNow()}\r\n                </div>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={(\r\n                    <Link href={`/user/${item.User}`}>\r\n                      <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                    )}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </div>\r\n      )}\r\n      {/* <CommentForm/>\r\n      <Comments/> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    RetweetId: PropTypes.number,\r\n    Retweet: PropTypes.objectOf(PropTypes.any),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}