{"ast":null,"code":"import React, { useEffect, useState, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport Head from 'next/head';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport Router from 'next/router';\nimport useSWR from 'swr';\nimport wrapper from '../store/configureStore';\nimport AppLayout from '../component/AppLayout';\nimport NickNameEditForm from '../component/NickNameEditForm';\nimport FollowList from '../component/FollowList';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst fetcher = url => axios.get(url, {\n  withCredentials: true\n}).then(result => result.data);\n\nconst Profile = () => {\n  // const dispatch = useDispatch();\n  const {\n    user\n  } = useSelector(state => state.user);\n  const {\n    0: followerLimit,\n    1: setFollowerLimit\n  } = useState(3);\n  const {\n    0: followingLimit,\n    1: setFollowingLimit\n  } = useState(3);\n  const {\n    data: followersData = [],\n    error: followerError,\n    mutate: mutateFollower\n  } = useSWR(`http://localhost:3065/user/followers?limit=${followerLimit}`, fetcher);\n  const {\n    data: followingsData = [],\n    error: followingError,\n    mutate: mutateFollowing\n  } = useSWR(`http://localhost:3065/user/followings?limit=${followingLimit}`, fetcher);\n  useEffect(() => {\n    if (!(user && user.id)) {\n      Router.push('/');\n    }\n  }, [user && user.id]);\n  /*  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_FOLLOWERS_REQUEST,\r\n    });\r\n    dispatch({\r\n      type: LOAD_FOLLOWINGS_REQUEST,\r\n    });\r\n  }, []); */\n\n  const loadMoreFollowing = useCallback(() => {\n    setFollowingLimit(prev => prev + 3);\n  }, []);\n  const loadMoreFollower = useCallback(() => {\n    setFollowerLimit(prev => prev + 3);\n  }, []);\n\n  if (!user) {\n    return '내 정보 로딩 중...';\n  }\n\n  if (followerError || followingError) {\n    console.error(followerError || followingError);\n    return '팔로윙||팔로워 로딩 중 에러가 발생합니다';\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"Profile | NodeBird\"\n      })\n    }), /*#__PURE__*/_jsxs(AppLayout, {\n      children: [/*#__PURE__*/_jsx(NickNameEditForm, {}), /*#__PURE__*/_jsx(FollowList, {\n        header: \"Following\",\n        followData: followingsData,\n        mutate: mutateFollowing,\n        onClickMore: loadMoreFollowing,\n        loading: !followingsData && !followingError\n      }), /*#__PURE__*/_jsx(FollowList, {\n        header: \"Follower\",\n        followData: followersData,\n        mutate: mutateFollower,\n        onClickMore: loadMoreFollower,\n        loading: !followersData && !followerError\n      })]\n    })]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}