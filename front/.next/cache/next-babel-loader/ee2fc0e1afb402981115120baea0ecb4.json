{"ast":null,"code":"import { all, fork, takeLatest, put, call, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, LOAD_POSTS_REQUEST, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}}/comment`, data);\n}\n\nfunction removeCommentAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["C:/Users/irald/Documents/reactSns/front/sagas/post.js"],"names":["all","fork","takeLatest","put","call","delay","axios","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","LOAD_POSTS_REQUEST","LOAD_POSTS_FAILURE","LOAD_POSTS_SUCCESS","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","addPostAPI","post","content","addCommentAPI","postId","removeCommentAPI","addPost","action","result","type","id","error","response","addComment","removePost","loadPosts","watchAddPost","watchAddComment","watchRemovePost","watchLoadPosts","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, takeLatest, put, call, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport shortid from 'shortid';\r\nimport {ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE, ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, LOAD_POSTS_REQUEST, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS, generateDummyPost} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get('/posts', data);\r\n}\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', {content: data});\r\n}\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}}/comment`, data);\r\n}\r\nfunction removeCommentAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPosts),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}