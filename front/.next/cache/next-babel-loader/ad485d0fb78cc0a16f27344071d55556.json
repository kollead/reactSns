{"ast":null,"code":"import shortid from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortid.generate(),\n  User: {\n    id: shortid.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const removePost = data => ({\n  type: REMOVE_POST_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePost = draft.mainPosts.length === 10;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = {...state.mainPosts[postIndex]};\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostsLoading = true;\n      draft.likePostsDone = false;\n      draft.likePostsError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostsLoading = false;\n        draft.likePostsDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostsLoading = false;\n      draft.likePostsError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostsLoading = true;\n      draft.unlikePostsDone = false;\n      draft.unlikePostsError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id === action.data.UserId);\n        draft.unlikePostsLoading = false;\n        draft.unlikePostsDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.imagePaths = action.data;\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      break;\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      draft.retweetLoading = false;\n      draft.retweetDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/irald/Documents/reactSns/front/reducers/post.js"],"names":["shortid","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","loadPostsLoading","loadPostsDone","loadPostsError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","addPost","data","type","addComment","removePost","reducer","state","action","draft","concat","length","error","unshift","post","find","v","PostId","filter","likePostsLoading","likePostsDone","likePostsError","Likers","push","UserId","unlikePostsLoading","unlikePostsDone","unlikePostsError","i"],"mappings":"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","sourcesContent":["import shortid from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n  id: shortid.generate(),\r\n  User: {\r\n    id: shortid.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortid.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST, data,\r\n});\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST, data,\r\n});\r\nexport const removePost = (data) => ({\r\n  type: REMOVE_POST_REQUEST, data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = draft.mainPosts.concat(action.data);\r\n      draft.hasMorePost = draft.mainPosts.length === 10;\r\n      break;\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      draft.imagePaths = [];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = {...state.mainPosts[postIndex]};\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n      break;\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostsLoading = true;\r\n      draft.likePostsDone = false;\r\n      draft.likePostsError = null;\r\n      break;\r\n    case LIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({id: action.data.UserId});\r\n      draft.likePostsLoading = false;\r\n      draft.likePostsDone = true;\r\n      break;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostsLoading = false;\r\n      draft.likePostsError = action.error;\r\n      break;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unlikePostsLoading = true;\r\n      draft.unlikePostsDone = false;\r\n      draft.unlikePostsError = null;\r\n      break;\r\n    case UNLIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((v) => v.id === action.data.UserId);\r\n      draft.unlikePostsLoading = false;\r\n      draft.unlikePostsDone = true;\r\n      break;\r\n    }\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unlikePostsLoading = false;\r\n      draft.unlikePostsError = action.error;\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.uploadImagesLoading = true;\r\n      draft.uploadImagesDone = false;\r\n      draft.uploadImagesError = null;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS:\r\n      draft.imagePaths = action.data;\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesDone = true;\r\n      break;\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesError = action.error;\r\n      break;\r\n    case REMOVE_IMAGE:\r\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      break;\r\n    case RETWEET_REQUEST:\r\n      draft.retweetLoading = true;\r\n      draft.retweetDone = false;\r\n      draft.retweetError = null;\r\n      break;\r\n    case RETWEET_SUCCESS:\r\n      draft.retweetLoading = false;\r\n      draft.retweetDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      break;\r\n    case RETWEET_FAILURE:\r\n      draft.retweetLoading = false;\r\n      draft.retweetError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}