{"ast":null,"code":"import { all, fork, takeLatest, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST } from '../reducers/user';\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logoutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(loginAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  // const result=yield call(logoutAPI)\n  yield delay(1000);\n\n  try {\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* signUp() {\n  yield delay(1000);\n\n  try {\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/irald/Documents/reactSns/front/sagas/user.js"],"names":["all","fork","takeLatest","put","delay","call","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","loginAPI","data","post","logoutAPI","logIn","action","type","error","response","logOut","signUp","watchLogin","watchLogout","watchSignUp","userSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,GAA/B,EAAoCC,KAApC,EAA2CC,IAA3C,QAAsD,oBAAtD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,cAAxC,EACEC,eADF,EACmBC,eADnB,EACoCC,eADpC,EAEEC,eAFF,EAEmBC,eAFnB,EAEoCC,eAFpC,QAE0D,kBAF1D;;AAIA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AACD,SAASE,SAAT,GAAqB;AACnB,SAAOb,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEf,cADE;AAERU,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOM,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEd,cADE;AAERS,MAAAA,IAAI,EAAEM,KAAK,CAACC,QAAN,CAAeP;AAFb,KAAD,CAAT;AAID;AACF;;AAED,UAAUQ,MAAV,GAAmB;AACjB;AACA,QAAMrB,KAAK,CAAC,IAAD,CAAX;;AACA,MAAI;AACF,UAAMD,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEZ;AADE,KAAD,CAAT;AAGD,GAJD,CAIE,OAAOa,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEX,eADE;AAERY,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeP;AAFd,KAAD,CAAT;AAID;AACF;;AACD,UAAUS,MAAV,GAAmB;AACjB,QAAMtB,KAAK,CAAC,IAAD,CAAX;;AACA,MAAI;AACF,UAAMD,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAET;AADE,KAAD,CAAT;AAGD,GAJD,CAIE,OAAOU,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAER,eADE;AAERS,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeP;AAFd,KAAD,CAAT;AAID;AACF;;AAED,UAAUU,UAAV,GAAuB;AACrB,QAAMzB,UAAU,CAACO,cAAD,EAAiBW,KAAjB,CAAhB;AACD;;AAED,UAAUQ,WAAV,GAAwB;AACtB,QAAM1B,UAAU,CAACU,eAAD,EAAkBa,MAAlB,CAAhB;AACD;;AAED,UAAUI,WAAV,GAAwB;AACtB,QAAM3B,UAAU,CAACa,eAAD,EAAkBW,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAM9B,GAAG,CAAC,CACRC,IAAI,CAAC0B,UAAD,CADI,EAER1B,IAAI,CAAC2B,WAAD,CAFI,EAGR3B,IAAI,CAAC4B,WAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import {all, fork, takeLatest, put, delay, call} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST,\r\n  LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST,\r\n  SIGN_UP_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST} from '../reducers/user';\r\n\r\nfunction loginAPI(data) {\r\n  return axios.post('/api/login', data);\r\n}\r\nfunction logoutAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // const result = yield call(loginAPI, action.data)\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* logOut() {\r\n  // const result=yield call(logoutAPI)\r\n  yield delay(1000);\r\n  try {\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: error.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* signUp() {\r\n  yield delay(1000);\r\n  try {\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogout() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin),\r\n    fork(watchLogout),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}