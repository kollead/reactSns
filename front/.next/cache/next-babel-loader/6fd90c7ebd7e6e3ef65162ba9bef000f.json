{"ast":null,"code":"import { all, fork, takeLatest, put, call, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, LOAD_POSTS_REQUEST, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS, LIKE_POST_REQUEST, LIKE_POST_FAILURE, LIKE_POST_SUCCESS, UNLIKE_POST_REQUEST, UNLIKE_POST_FAILURE, UNLIKE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}}/comment`, data);\n}\n\nfunction removeCommentAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}}/like`);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}}/like`);\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchLikePost), fork(watchUnlikePost)]);\n}","map":{"version":3,"sources":["C:/Users/irald/Documents/reactSns/front/sagas/post.js"],"names":["all","fork","takeLatest","put","call","delay","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","LOAD_POSTS_REQUEST","LOAD_POSTS_FAILURE","LOAD_POSTS_SUCCESS","LIKE_POST_REQUEST","LIKE_POST_FAILURE","LIKE_POST_SUCCESS","UNLIKE_POST_REQUEST","UNLIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","data","get","addPostAPI","post","content","addCommentAPI","postId","removeCommentAPI","unlikePostAPI","delete","likePostAPI","patch","removePostAPI","addPost","action","result","type","id","error","response","addComment","removePost","loadPosts","unlikePost","likePost","watchAddPost","watchAddComment","watchRemovePost","watchLoadPosts","watchLikePost","watchUnlikePost","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, takeLatest, put, call, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS,\r\n  LOAD_POSTS_REQUEST, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS,\r\n  LIKE_POST_REQUEST, LIKE_POST_FAILURE, LIKE_POST_SUCCESS,\r\n  UNLIKE_POST_REQUEST, UNLIKE_POST_FAILURE, UNLIKE_POST_SUCCESS} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get('/posts', data);\r\n}\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', {content: data});\r\n}\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}}/comment`, data);\r\n}\r\nfunction removeCommentAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}}/like`);\r\n}\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}}/like`);\r\n}\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPosts),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}