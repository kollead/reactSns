{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, call, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS, LOAD_POSTS_REQUEST, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS, LIKE_POST_REQUEST, LIKE_POST_FAILURE, LIKE_POST_SUCCESS, UNLIKE_POST_REQUEST, UNLIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_SUCCESS, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(\"/posts?lastId=\".concat(lastId || 0));\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/post/\".concat(data), {\n    withCredentials: true\n  });\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"}/comment\"), data);\n}\n\nfunction removeCommentAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"}/like\"));\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"}/like\"));\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadPostsAPI, action.lastId);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 12;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          _context6.next = 12;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 12;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          _context8.next = 12;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchLikePost), fork(watchUnlikePost), fork(watchUploadImages), fork(watchRetweet), fork(watchLoadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}","map":{"version":3,"sources":["C:/Users/irald/Documents/reactSns/front/sagas/post.js"],"names":["addPost","addComment","removePost","loadPosts","loadPost","unlikePost","likePost","uploadImages","retweet","watchAddPost","watchAddComment","watchRemovePost","watchLoadPosts","watchLikePost","watchUnlikePost","watchUploadImages","watchRetweet","watchLoadPost","postSaga","all","fork","takeLatest","put","call","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_SUCCESS","LOAD_POSTS_REQUEST","LOAD_POSTS_FAILURE","LOAD_POSTS_SUCCESS","LIKE_POST_REQUEST","LIKE_POST_FAILURE","LIKE_POST_SUCCESS","UNLIKE_POST_REQUEST","UNLIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_SUCCESS","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","lastId","get","loadPostAPI","data","withCredentials","addPostAPI","post","addCommentAPI","postId","removeCommentAPI","unlikePostAPI","likePostAPI","patch","removePostAPI","uploadImagesAPI","retweetAPI","action","result","type","id","error","response"],"mappings":"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","sourcesContent":["import {all, fork, takeLatest, put, call, throttle } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\r\n  REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_SUCCESS,\r\n  LOAD_POSTS_REQUEST, LOAD_POSTS_FAILURE, LOAD_POSTS_SUCCESS,\r\n  LIKE_POST_REQUEST, LIKE_POST_FAILURE, LIKE_POST_SUCCESS,\r\n  UNLIKE_POST_REQUEST, UNLIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_SUCCESS, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\r\n\r\nfunction loadPostsAPI(lastId) {\r\n  return axios.get(`/posts?lastId=${lastId || 0}`);\r\n}\r\nfunction loadPostAPI(data) {\r\n  return axios.get(`/post/${data}`, {\r\n    withCredentials: true,\r\n  });\r\n}\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', data);\r\n}\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}}/comment`, data);\r\n}\r\nfunction removeCommentAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}}/like`);\r\n}\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}}/like`);\r\n}\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`);\r\n}\r\nfunction uploadImagesAPI(data) {\r\n  return axios.post('/post/images', data);\r\n}\r\nfunction retweetAPI(data) {\r\n  return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: error.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: error.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: error.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* retweet(action) {\r\n  try {\r\n    const result = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPosts),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchUploadImages),\r\n    fork(watchRetweet),\r\n    fork(watchLoadPost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}