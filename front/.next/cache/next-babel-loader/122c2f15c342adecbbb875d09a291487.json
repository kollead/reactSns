{"ast":null,"code":"import shortid from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortid.generate(),\n  User: {\n    id: shortid.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph,\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'nick01'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'nick01'\n  }\n});\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const removePost = data => ({\n  type: REMOVE_POST_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data.concat(draft.mainPosts));\n      draft.hasMorePost = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = {...state.mainPosts[postIndex]};\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/irald/Documents/reactSns/front/reducers/post.js"],"names":["shortid","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","loadPostsLoading","loadPostsDone","loadPostsError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","dummyPost","data","dummyComment","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","type","addComment","removePost","reducer","state","action","draft","loadPostLoading","unshift","concat","length","error","post","find","v","postId","filter"],"mappings":"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","sourcesContent":["import shortid from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n  id: shortid.generate(),\r\n  User: {\r\n    id: shortid.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph,\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortid.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'nick01',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\nconst dummyComment = (data) => ({\r\n  id: shortid.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'nick01',\r\n  },\r\n});\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST, data,\r\n});\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST, data,\r\n});\r\nexport const removePost = (data) => ({\r\n  type: REMOVE_POST_REQUEST, data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(action.data.concat(draft.mainPosts));\r\n      draft.hasMorePost = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(dummyPost(action.data));\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n      post.Comments.unshift(dummyComment(action.data.content));\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = {...state.mainPosts[postIndex]};\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n      break;\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}