{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  singlePost: null,\n  imagePaths: [],\n  hasMorePost: true,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const removePost = data => ({\n  type: REMOVE_POST_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_USER_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_USER_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePost = draft.mainPosts.length === 10;\n      break;\n\n    case LOAD_USER_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.singlePost = action.data;\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = {...state.mainPosts[postIndex]};\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostsLoading = true;\n      draft.likePostsDone = false;\n      draft.likePostsError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostsLoading = false;\n        draft.likePostsDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostsLoading = false;\n      draft.likePostsError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostsLoading = true;\n      draft.unlikePostsDone = false;\n      draft.unlikePostsError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id === action.data.UserId);\n        draft.unlikePostsLoading = false;\n        draft.unlikePostsDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostsLoading = false;\n      draft.unlikePostsError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.imagePaths = action.data;\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      break;\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      draft.retweetLoading = false;\n      draft.retweetDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/irald/Documents/reactSns/front/reducers/post.js"],"names":["produce","initialState","mainPosts","singlePost","imagePaths","hasMorePost","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","loadPostsLoading","loadPostsDone","loadPostsError","loadPostLoading","loadPostDone","loadPostError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","addPost","data","type","addComment","removePost","reducer","state","action","draft","concat","length","error","unshift","post","find","v","id","PostId","Comments","filter","likePostsLoading","likePostsDone","likePostsError","Likers","push","UserId","unlikePostsLoading","unlikePostsDone","unlikePostsError","i"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  singlePost: null,\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST, data,\r\n});\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST, data,\r\n});\r\nexport const removePost = (data) => ({\r\n  type: REMOVE_POST_REQUEST, data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case LOAD_USER_POSTS_REQUEST:\r\n    case LOAD_HASHTAG_POSTS_REQUEST:\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_USER_POSTS_SUCCESS:\r\n    case LOAD_HASHTAG_POSTS_SUCCESS:\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = draft.mainPosts.concat(action.data);\r\n      draft.hasMorePost = draft.mainPosts.length === 10;\r\n      break;\r\n    case LOAD_USER_POSTS_FAILURE:\r\n    case LOAD_HASHTAG_POSTS_FAILURE:\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostLoading = true;\r\n      draft.loadPostDone = false;\r\n      draft.loadPostError = null;\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostDone = true;\r\n      draft.singlePost = action.data;\r\n      break;\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      draft.imagePaths = [];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = {...state.mainPosts[postIndex]};\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n      break;\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case LIKE_POST_REQUEST:\r\n      draft.likePostsLoading = true;\r\n      draft.likePostsDone = false;\r\n      draft.likePostsError = null;\r\n      break;\r\n    case LIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers.push({id: action.data.UserId});\r\n      draft.likePostsLoading = false;\r\n      draft.likePostsDone = true;\r\n      break;\r\n    }\r\n    case LIKE_POST_FAILURE:\r\n      draft.likePostsLoading = false;\r\n      draft.likePostsError = action.error;\r\n      break;\r\n    case UNLIKE_POST_REQUEST:\r\n      draft.unlikePostsLoading = true;\r\n      draft.unlikePostsDone = false;\r\n      draft.unlikePostsError = null;\r\n      break;\r\n    case UNLIKE_POST_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((v) => v.id === action.data.UserId);\r\n      draft.unlikePostsLoading = false;\r\n      draft.unlikePostsDone = true;\r\n      break;\r\n    }\r\n    case UNLIKE_POST_FAILURE:\r\n      draft.unlikePostsLoading = false;\r\n      draft.unlikePostsError = action.error;\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.uploadImagesLoading = true;\r\n      draft.uploadImagesDone = false;\r\n      draft.uploadImagesError = null;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS:\r\n      draft.imagePaths = action.data;\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesDone = true;\r\n      break;\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesError = action.error;\r\n      break;\r\n    case REMOVE_IMAGE:\r\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      break;\r\n    case RETWEET_REQUEST:\r\n      draft.retweetLoading = true;\r\n      draft.retweetDone = false;\r\n      draft.retweetError = null;\r\n      break;\r\n    case RETWEET_SUCCESS:\r\n      draft.retweetLoading = false;\r\n      draft.retweetDone = true;\r\n      draft.mainPosts.unshift(action.data);\r\n      break;\r\n    case RETWEET_FAILURE:\r\n      draft.retweetLoading = false;\r\n      draft.retweetError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}